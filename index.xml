<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>PigAunt的博客</title><link>https://www.pigaunt.top/</link><description>Recent content on PigAunt的博客</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Tue, 16 Nov 2021 20:03:14 +0800</lastBuildDate><atom:link href="https://www.pigaunt.top/index.xml" rel="self" type="application/rss+xml"/><item><title>回文字符串和 Manacher 算法</title><link>https://www.pigaunt.top/post/string/palindrome-and-manacher-algorithm/</link><pubDate>Tue, 16 Nov 2021 20:03:14 +0800</pubDate><guid>https://www.pigaunt.top/post/string/palindrome-and-manacher-algorithm/</guid><description>回文字符串和 Manacher 算法 回文字符串及回文中心表示法 形如$s_0, s_1, \dots,s_{i - 1}, s_i, s_{i - 1} \dots, s_1, s_0$或$s_0, s_1, \dots, s_i, s_i \dots, s_1, s_0$的，正着写和倒着写相同的字符串叫做**回文字符串**。abcba、aabbaa、c都是回文字符串。如果一个字符串的子串正着写和倒着写相同，这个字串叫做**回文子串</description></item><item><title>树形动态规划</title><link>https://www.pigaunt.top/post/dp/tree-dp/</link><pubDate>Mon, 18 Oct 2021 10:50:57 +0800</pubDate><guid>https://www.pigaunt.top/post/dp/tree-dp/</guid><description>树形动态规划 问题简介 需要用动态规划解决的问题被搬到了树上（不再是线性或区间的），此类问题与其他的区别仅仅在于遍历所有状态需要在树上进行，而不是用一个循环。 例题 AcWing-1072-树的最长路径 树的直径：树上距离最远的两个点。 方法一：两次搜索 任取一个点，找到与这个点距离最远的点$</description></item><item><title>数位型动态规划</title><link>https://www.pigaunt.top/post/dp/dp-on-numbers/</link><pubDate>Mon, 18 Oct 2021 10:50:50 +0800</pubDate><guid>https://www.pigaunt.top/post/dp/dp-on-numbers/</guid><description>数位型动态规划 问题简介 此类问题一般是求在一个特定范围内满足某种特殊性质的数的数量，也有求其它信息的类型。数位型动态规划做法基本类似，大多是预处理-按位枚举范围中的数-计数。 技巧 区间转换$[m, n] \Rightarrow f_n - f_{m - 1}$ 按位枚举数时先考虑该位小于最高位，再考虑相等的情况（就像一棵二叉树）。 对于</description></item><item><title>状态压缩的动态规划</title><link>https://www.pigaunt.top/post/dp/state-compressed-dp/</link><pubDate>Mon, 23 Aug 2021 09:57:53 +0800</pubDate><guid>https://www.pigaunt.top/post/dp/state-compressed-dp/</guid><description>状态压缩的动态规划 分类 基本有两种： 棋盘式的动态规划（基于联通性） 集合式的动态规划 状态压缩 利用某些手段（以二进制压缩为主）将复杂的状态处理后存储。 分类 棋盘式的动态规划 给你一个棋盘，要在棋盘上摆放一些东西，但又有一些限制，求方案数/最多摆放数量。这类问题一般将每一行（自上而下递推）或</description></item><item><title>单调队列</title><link>https://www.pigaunt.top/post/data-structure/monotonous-queue/</link><pubDate>Wed, 11 Aug 2021 11:32:30 +0800</pubDate><guid>https://www.pigaunt.top/post/data-structure/monotonous-queue/</guid><description>单调队列 滑动窗口问题 洛谷-P1886-滑动窗口/【模板】单调队列 有一个长为$n$的序列$a$，以及一个大小为$k$的窗口。现在这个从左边开始向右滑动，每次滑动一个单位，求出每次滑动后窗口中的最大值和最小值。 如果每次都遍历整个窗口，时间复杂度为$O(nk)$，相当高。但其中我们进行</description></item><item><title>LIS和LCS</title><link>https://www.pigaunt.top/post/dp/lis-and-lcs-problem/</link><pubDate>Wed, 11 Aug 2021 10:50:50 +0800</pubDate><guid>https://www.pigaunt.top/post/dp/lis-and-lcs-problem/</guid><description>LIS和LCS 最长上升子序列（LIS）问题 给出一个由数字组成的序列，要求从中挑选尽量多的数，组成一个单调上升的子序列。 要解决这个问题，我们可以这样想： 如果现在有了一个最长上升子序列，我们要在后面加一个数。如果这个数比最长上升子序列的最后一个数大，我们可以将它加入其中；如果更小，那</description></item><item><title>区间型动态规划</title><link>https://www.pigaunt.top/post/dp/range-dp/</link><pubDate>Wed, 11 Aug 2021 10:50:50 +0800</pubDate><guid>https://www.pigaunt.top/post/dp/range-dp/</guid><description>区间型动态规划 石子合并问题 有若干个石子排成一行，每个石子有一定的质量，现在要将它们合并成一堆，每一次合并产生的价值是两堆石子的质量和（只能合并相邻的石子），求最大/最小价值。 以最小值为例，对于这个问题，如果我们用$f_{i, j}$表示从$i$到$j$的代价最小值，那么这一块区域可</description></item><item><title>数字三角形</title><link>https://www.pigaunt.top/post/dp/number-triangle/</link><pubDate>Wed, 11 Aug 2021 10:50:50 +0800</pubDate><guid>https://www.pigaunt.top/post/dp/number-triangle/</guid><description>数字三角形 问题描述 一个由数字构成的三角形，自上而下选出若干个数（不能向上走），这些数的和最大/最小是？ 在一个矩形地图中行走，只能向右或向下，每到一个点的花费是一个特定的数，求最小花费？ 以上是数字三角形模型的两种典型形式，它们的共同特征在于严格规定了递推的方向，将问题简化。此类问题</description></item><item><title>状态机</title><link>https://www.pigaunt.top/post/dp/dfa/</link><pubDate>Wed, 11 Aug 2021 10:50:50 +0800</pubDate><guid>https://www.pigaunt.top/post/dp/dfa/</guid><description>状态机 状态机是数学模型 有限状态自动机（以下简称状态机），是用来抽象事物运行规则的数学模型，我们可以把状态机看成一个图，结点代表各个状态，边代表状态间的转换。 我们来看一个最简单的例子：自动门。自动门只有开和关两种状态，关可以转换到开，开可以转换到关。 状态机模型在动态规划中的运用 状态</description></item><item><title>背包问题</title><link>https://www.pigaunt.top/post/dp/pack-dp/</link><pubDate>Wed, 11 Aug 2021 10:50:50 +0800</pubDate><guid>https://www.pigaunt.top/post/dp/pack-dp/</guid><description>背包问题 01背包 现在有一个固定容量的背包，和若干体积一定、价值一定的物品，要将一些物品放入背包中，并获得最大的价值。 如果我们已经有了一个装有最大价值物品的背包，要对它进行扩容，并装入体积为$v_i$，价值为$w_i$的物品，此时最大价值就是原来的价值加上新增物品的价值。如果用$f</description></item><item><title>Hello World</title><link>https://www.pigaunt.top/post/misc/hello-world/</link><pubDate>Sun, 06 Jun 2021 21:45:50 +0800</pubDate><guid>https://www.pigaunt.top/post/misc/hello-world/</guid><description>Hello, World! 过了一年多，重拾个人博客。尽管时间很紧张，事情一件件卷来，我还是希望用博客分享一些想法。 不定期更新，内容也没什么限定，希望可以给您愉悦的阅读感受。</description></item><item><title>归档</title><link>https://www.pigaunt.top/archives/</link><pubDate>Sun, 06 Jun 2021 21:31:50 +0800</pubDate><guid>https://www.pigaunt.top/archives/</guid><description/></item><item><title>搜索</title><link>https://www.pigaunt.top/search/</link><pubDate>Sun, 06 Jun 2021 21:31:28 +0800</pubDate><guid>https://www.pigaunt.top/search/</guid><description/></item><item><title>关于</title><link>https://www.pigaunt.top/about/</link><pubDate>Sun, 06 Jun 2021 14:34:21 +0800</pubDate><guid>https://www.pigaunt.top/about/</guid><description>我的个人博客。 记录自己的学习和爱好。</description></item></channel></rss>
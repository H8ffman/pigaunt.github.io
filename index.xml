<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>PigAunt的博客</title><link>https://www.pigaunt.top/</link><description>Recent content on PigAunt的博客</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Sun, 06 Jun 2021 21:45:50 +0800</lastBuildDate><atom:link href="https://www.pigaunt.top/index.xml" rel="self" type="application/rss+xml"/><item><title>Hello World</title><link>https://www.pigaunt.top/post/misc/hello-world/</link><pubDate>Sun, 06 Jun 2021 21:45:50 +0800</pubDate><guid>https://www.pigaunt.top/post/misc/hello-world/</guid><description>Hello, World! 过了一年多，重拾个人博客。尽管时间很紧张，事情一件件卷来，我还是希望用博客分享一些想法。 不定期更新，内容也没什么限定，希望可以给您愉悦的阅读感受。</description></item><item><title>归档</title><link>https://www.pigaunt.top/archives/</link><pubDate>Sun, 06 Jun 2021 21:31:50 +0800</pubDate><guid>https://www.pigaunt.top/archives/</guid><description/></item><item><title>搜索</title><link>https://www.pigaunt.top/search/</link><pubDate>Sun, 06 Jun 2021 21:31:28 +0800</pubDate><guid>https://www.pigaunt.top/search/</guid><description/></item><item><title>关于</title><link>https://www.pigaunt.top/about/</link><pubDate>Sun, 06 Jun 2021 14:34:21 +0800</pubDate><guid>https://www.pigaunt.top/about/</guid><description>我的个人博客。 记录自己的学习和爱好。</description></item><item><title/><link>https://www.pigaunt.top/post/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/LIS%E5%92%8CLCS/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.pigaunt.top/post/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/LIS%E5%92%8CLCS/</guid><description>title: &amp;ldquo;LIS和LCS&amp;rdquo; date: 2021-08-11T10:50:50+08:00 tags : [ &amp;ldquo;动态规划&amp;rdquo; ] categories: [ &amp;ldquo;动态规划&amp;rdquo; ] LIS和LCS 最长上升子序列（LIS）问题 给出一个由数字组成的序列，要求从中挑选尽量多的数，组成一个单调上升的子序列。 要解决这个问题，我们可以这样</description></item><item><title/><link>https://www.pigaunt.top/post/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E5%8C%BA%E9%97%B4%E5%9E%8B%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.pigaunt.top/post/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E5%8C%BA%E9%97%B4%E5%9E%8B%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</guid><description>title: &amp;ldquo;区间型动态规划&amp;rdquo; date: 2021-08-11T10:50:50+08:00 tags : [ &amp;ldquo;动态规划&amp;rdquo; ] categories: [ &amp;ldquo;动态规划&amp;rdquo; ] 区间型动态规划 石子合并问题 有若干个石子排成一行，每个石子有一定的质量，现在要将它们合并成一堆，每一次合并产生的价值是两堆石子的质量和（只能合并相邻</description></item><item><title/><link>https://www.pigaunt.top/post/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E6%95%B0%E5%AD%97%E4%B8%89%E8%A7%92%E5%BD%A2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.pigaunt.top/post/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E6%95%B0%E5%AD%97%E4%B8%89%E8%A7%92%E5%BD%A2/</guid><description>title: &amp;ldquo;数字三角形&amp;rdquo; date: 2021-08-11T10:50:50+08:00 tags : [ &amp;ldquo;动态规划&amp;rdquo; ] categories: [ &amp;ldquo;动态规划&amp;rdquo; ] 问题描述 一个由数字构成的三角形，自上而下选出若干个数（不能向上走），这些数的和最大/最小是？ 在一个矩形地图中行走，只能向右或向下，每到一个点的花费是一</description></item><item><title/><link>https://www.pigaunt.top/post/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E7%8A%B6%E6%80%81%E6%9C%BA/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.pigaunt.top/post/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E7%8A%B6%E6%80%81%E6%9C%BA/</guid><description>title: &amp;ldquo;状态机&amp;rdquo; date: 2021-08-11T10:50:50+08:00 tags : [ &amp;ldquo;动态规划&amp;rdquo; ] categories: [ &amp;ldquo;动态规划&amp;rdquo; ] 状态机是数学模型 有限状态自动机（以下简称状态机），是用来抽象事物运行规则的数学模型，我们可以把状态机看成一个图，结点代表各个状态，边代表状态间的转换。 我们</description></item><item><title/><link>https://www.pigaunt.top/post/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.pigaunt.top/post/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/</guid><description>title: &amp;ldquo;背包问题&amp;rdquo; date: 2021-08-11T10:50:50+08:00 tags : [ &amp;ldquo;动态规划&amp;rdquo; ] categories: [ &amp;ldquo;动态规划&amp;rdquo; ] 背包问题 01背包 现在有一个固定容量的背包，和若干体积一定、价值一定的物品，要将一些物品放入背包中，并获得最大的价值。 如果我们已经有了一个装有最大价值物品</description></item></channel></rss>